package labeler

import (
	"fmt"
	"reflect"
	"time"
)

// Labelee is implemented by any type with a SetLabels method, which
// accepts map[string]string and handles assignment of those values.
type Labelee interface {
	SetLabels(labels map[string]string)
}

// StrictLabelee is implemented by types with a SetLabels method, which accepts
// map[string]string and handles assignment of those values, returning error if
// there was an issue assigning the value.
type StrictLabelee interface {
	SetLabels(labels map[string]string) error
}

// GenericLabelee is implemented by any type with a SetLabels method, which
// accepts map[string]string and handles assignment of those values.
type GenericLabelee interface {
	SetLabels(labels map[string]string, tag string) error
}

// Labeled is implemented by types with a method GetLabels, which returns
// a map[string]string of labels and values
type Labeled interface {
	GetLabels() map[string]string
}

// GenericallyLabeled is implemented by types with a method GetLabels, which
// accepts a string and returns a map[string]string of labels and values
type GenericallyLabeled interface {
	GetLabels(t string) map[string]string
}

// Unmarshaler is implemented by any type that has the method UnmarshalLabels,
// providing a means of unmarshaling map[string]string themselves.
type Unmarshaler interface {
	UnmarshalLabels(v map[string]string) error
}

// UnmarshalerWithOpts is implemented by any type that has the method
// UnmarshalLabels, providing a means of unmarshaling map[string]string
// that also accepts Options.
type UnmarshalerWithOpts interface {
	UnmarshalLabels(v map[string]string, opts Options) error
}

// Marshaler is implemented by types with the method MarsahlLabels,
// thus being abel to marshal itself into map[string]string
type Marshaler interface {
	MarshalLabels() (map[string]string, error)
}

// MarshalerWithOpts is implemented by types with the method MarsahlLabels,
// thus being abel to marshal itself into map[string]string
type MarshalerWithOpts interface {
	MarshalLabels(o Options) (map[string]string, error)
}

// Stringee is implemented by any value that has a FromString method,
// which parses the “native” format for that value from a string and
// returns a bool value to indicate success (true) or failure (false)
// of parsing.
// Use StringeeStrict if returning an error is preferred.
type Stringee interface {
	FromString(s string) error
}

// TextUnmarshaler is the interface implemented by an object that can unmarshal a textual representation of itself.
//
// UnmarshalText must be able to decode the form generated by MarshalText. UnmarshalText must copy the text if it wishes to retain the text after returning.
type TextUnmarshaler interface {
	UnmarshalText(text []byte) error
}

// TextMarshaler is the interface implemented by an object that can marshal itself into a textual form.
//
// MarshalText encodes the receiver into UTF-8-encoded text and returns the result.
type TextMarshaler interface {
	MarshalText() (text []byte, err error)
}

var labeleeType reflect.Type = reflect.TypeOf(new(Labelee)).Elem()
var strictLabeleeType reflect.Type = reflect.TypeOf(new(StrictLabelee)).Elem()
var genericLabeleeType reflect.Type = reflect.TypeOf(new(GenericLabelee)).Elem()
var labeledType = reflect.TypeOf(new(Labeled)).Elem()
var genericallyLabeledType = reflect.TypeOf(new(GenericallyLabeled)).Elem()
var unmarshalerType = reflect.TypeOf(new(Unmarshaler)).Elem()
var unmarshalerWithOptsType = reflect.TypeOf(new(UnmarshalerWithOpts)).Elem()
var marshalerType = reflect.TypeOf(new(Marshaler)).Elem()
var marshalerWithOptsType = reflect.TypeOf(new(MarshalerWithOpts)).Elem()
var stringeeType = reflect.TypeOf(new(Stringee)).Elem()
var textUnmarshalerType = reflect.TypeOf(new(TextUnmarshaler)).Elem()
var textMarshalerType = reflect.TypeOf((new(TextMarshaler))).Elem()
var stringerType = reflect.TypeOf(new(fmt.Stringer)).Elem()
var mapType reflect.Type = reflect.TypeOf(new(map[string]string))
var timeType = reflect.TypeOf(time.Time{})
var durationType = func() reflect.Type { var d time.Duration; return reflect.TypeOf(d) }()
